// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FileService.proto
#ifndef GRPC_FileService_2eproto__INCLUDED
#define GRPC_FileService_2eproto__INCLUDED

#include "FileService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace fpdb {
namespace store {
namespace server {
namespace file {

// Interface exported by the server.
class FileService final {
 public:
  static constexpr char const* service_full_name() {
    return "fpdb.store.server.file.FileService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Read file
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fpdb::store::server::file::ReadFileResponse>> ReadFile(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fpdb::store::server::file::ReadFileResponse>>(ReadFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fpdb::store::server::file::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fpdb::store::server::file::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fpdb::store::server::file::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fpdb::store::server::file::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    // Get file size
    virtual ::grpc::Status GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::fpdb::store::server::file::GetFileSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpdb::store::server::file::GetFileSizeResponse>> AsyncGetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpdb::store::server::file::GetFileSizeResponse>>(AsyncGetFileSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpdb::store::server::file::GetFileSizeResponse>> PrepareAsyncGetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpdb::store::server::file::GetFileSizeResponse>>(PrepareAsyncGetFileSizeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Read file
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadFile(::grpc::ClientContext* context, ::fpdb::store::server::file::ReadFileRequest* request, ::grpc::ClientReadReactor< ::fpdb::store::server::file::ReadFileResponse>* reactor) = 0;
      #else
      virtual void ReadFile(::grpc::ClientContext* context, ::fpdb::store::server::file::ReadFileRequest* request, ::grpc::experimental::ClientReadReactor< ::fpdb::store::server::file::ReadFileResponse>* reactor) = 0;
      #endif
      // Get file size
      virtual void GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::fpdb::store::server::file::ReadFileResponse>* ReadFileRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fpdb::store::server::file::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fpdb::store::server::file::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fpdb::store::server::file::GetFileSizeResponse>* AsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fpdb::store::server::file::GetFileSizeResponse>* PrepareAsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::fpdb::store::server::file::ReadFileResponse>> ReadFile(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fpdb::store::server::file::ReadFileResponse>>(ReadFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fpdb::store::server::file::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fpdb::store::server::file::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fpdb::store::server::file::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fpdb::store::server::file::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    ::grpc::Status GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::fpdb::store::server::file::GetFileSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpdb::store::server::file::GetFileSizeResponse>> AsyncGetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpdb::store::server::file::GetFileSizeResponse>>(AsyncGetFileSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpdb::store::server::file::GetFileSizeResponse>> PrepareAsyncGetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpdb::store::server::file::GetFileSizeResponse>>(PrepareAsyncGetFileSizeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadFile(::grpc::ClientContext* context, ::fpdb::store::server::file::ReadFileRequest* request, ::grpc::ClientReadReactor< ::fpdb::store::server::file::ReadFileResponse>* reactor) override;
      #else
      void ReadFile(::grpc::ClientContext* context, ::fpdb::store::server::file::ReadFileRequest* request, ::grpc::experimental::ClientReadReactor< ::fpdb::store::server::file::ReadFileResponse>* reactor) override;
      #endif
      void GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFileSize(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::fpdb::store::server::file::ReadFileResponse>* ReadFileRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request) override;
    ::grpc::ClientAsyncReader< ::fpdb::store::server::file::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fpdb::store::server::file::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::ReadFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fpdb::store::server::file::GetFileSizeResponse>* AsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fpdb::store::server::file::GetFileSizeResponse>* PrepareAsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fpdb::store::server::file::GetFileSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileSize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Read file
    virtual ::grpc::Status ReadFile(::grpc::ServerContext* context, const ::fpdb::store::server::file::ReadFileRequest* request, ::grpc::ServerWriter< ::fpdb::store::server::file::ReadFileResponse>* writer);
    // Get file size
    virtual ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/, ::grpc::ServerWriter< ::fpdb::store::server::file::ReadFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::fpdb::store::server::file::ReadFileRequest* request, ::grpc::ServerAsyncWriter< ::fpdb::store::server::file::ReadFileResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFileSize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSize(::grpc::ServerContext* context, ::fpdb::store::server::file::GetFileSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::fpdb::store::server::file::GetFileSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadFile<WithAsyncMethod_GetFileSize<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReadFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fpdb::store::server::file::ReadFileRequest, ::fpdb::store::server::file::ReadFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fpdb::store::server::file::ReadFileRequest* request) { return this->ReadFile(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/, ::grpc::ServerWriter< ::fpdb::store::server::file::ReadFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::fpdb::store::server::file::ReadFileResponse>* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::fpdb::store::server::file::ReadFileResponse>* ReadFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFileSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::fpdb::store::server::file::GetFileSizeRequest, ::fpdb::store::server::file::GetFileSizeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fpdb::store::server::file::GetFileSizeRequest* request, ::fpdb::store::server::file::GetFileSizeResponse* response) { return this->GetFileSize(context, request, response); }));}
    void SetMessageAllocatorFor_GetFileSize(
        ::grpc::experimental::MessageAllocator< ::fpdb::store::server::file::GetFileSizeRequest, ::fpdb::store::server::file::GetFileSizeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fpdb::store::server::file::GetFileSizeRequest, ::fpdb::store::server::file::GetFileSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFileSize(
      ::grpc::CallbackServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFileSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ReadFile<ExperimentalWithCallbackMethod_GetFileSize<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ReadFile<ExperimentalWithCallbackMethod_GetFileSize<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/, ::grpc::ServerWriter< ::fpdb::store::server::file::ReadFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFileSize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/, ::grpc::ServerWriter< ::fpdb::store::server::file::ReadFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFileSize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ReadFile(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/, ::grpc::ServerWriter< ::fpdb::store::server::file::ReadFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ReadFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFileSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFileSize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFileSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFileSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFileSize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fpdb::store::server::file::GetFileSizeRequest, ::fpdb::store::server::file::GetFileSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fpdb::store::server::file::GetFileSizeRequest, ::fpdb::store::server::file::GetFileSizeResponse>* streamer) {
                       return this->StreamedGetFileSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::GetFileSizeRequest* /*request*/, ::fpdb::store::server::file::GetFileSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fpdb::store::server::file::GetFileSizeRequest,::fpdb::store::server::file::GetFileSizeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFileSize<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReadFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fpdb::store::server::file::ReadFileRequest, ::fpdb::store::server::file::ReadFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fpdb::store::server::file::ReadFileRequest, ::fpdb::store::server::file::ReadFileResponse>* streamer) {
                       return this->StreamedReadFile(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::fpdb::store::server::file::ReadFileRequest* /*request*/, ::grpc::ServerWriter< ::fpdb::store::server::file::ReadFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReadFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fpdb::store::server::file::ReadFileRequest,::fpdb::store::server::file::ReadFileResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReadFile<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_ReadFile<WithStreamedUnaryMethod_GetFileSize<Service > > StreamedService;
};

}  // namespace file
}  // namespace server
}  // namespace store
}  // namespace fpdb


#endif  // GRPC_FileService_2eproto__INCLUDED
