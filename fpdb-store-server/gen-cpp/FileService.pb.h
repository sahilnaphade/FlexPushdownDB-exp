// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FileService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FileService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FileService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FileService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileService_2eproto;
namespace fpdb {
namespace store {
namespace server {
namespace file {
class GetFileSizeRequest;
struct GetFileSizeRequestDefaultTypeInternal;
extern GetFileSizeRequestDefaultTypeInternal _GetFileSizeRequest_default_instance_;
class GetFileSizeResponse;
struct GetFileSizeResponseDefaultTypeInternal;
extern GetFileSizeResponseDefaultTypeInternal _GetFileSizeResponse_default_instance_;
class ReadFileRequest;
struct ReadFileRequestDefaultTypeInternal;
extern ReadFileRequestDefaultTypeInternal _ReadFileRequest_default_instance_;
class ReadFileResponse;
struct ReadFileResponseDefaultTypeInternal;
extern ReadFileResponseDefaultTypeInternal _ReadFileResponse_default_instance_;
class ReadOption;
struct ReadOptionDefaultTypeInternal;
extern ReadOptionDefaultTypeInternal _ReadOption_default_instance_;
}  // namespace file
}  // namespace server
}  // namespace store
}  // namespace fpdb
PROTOBUF_NAMESPACE_OPEN
template<> ::fpdb::store::server::file::GetFileSizeRequest* Arena::CreateMaybeMessage<::fpdb::store::server::file::GetFileSizeRequest>(Arena*);
template<> ::fpdb::store::server::file::GetFileSizeResponse* Arena::CreateMaybeMessage<::fpdb::store::server::file::GetFileSizeResponse>(Arena*);
template<> ::fpdb::store::server::file::ReadFileRequest* Arena::CreateMaybeMessage<::fpdb::store::server::file::ReadFileRequest>(Arena*);
template<> ::fpdb::store::server::file::ReadFileResponse* Arena::CreateMaybeMessage<::fpdb::store::server::file::ReadFileResponse>(Arena*);
template<> ::fpdb::store::server::file::ReadOption* Arena::CreateMaybeMessage<::fpdb::store::server::file::ReadOption>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fpdb {
namespace store {
namespace server {
namespace file {

enum ReadOption_ReadType : int {
  ReadOption_ReadType_UNKNOWN = 0,
  ReadOption_ReadType_FULL = 1,
  ReadOption_ReadType_RANGE = 2,
  ReadOption_ReadType_ReadOption_ReadType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadOption_ReadType_ReadOption_ReadType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadOption_ReadType_IsValid(int value);
constexpr ReadOption_ReadType ReadOption_ReadType_ReadType_MIN = ReadOption_ReadType_UNKNOWN;
constexpr ReadOption_ReadType ReadOption_ReadType_ReadType_MAX = ReadOption_ReadType_RANGE;
constexpr int ReadOption_ReadType_ReadType_ARRAYSIZE = ReadOption_ReadType_ReadType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadOption_ReadType_descriptor();
template<typename T>
inline const std::string& ReadOption_ReadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadOption_ReadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadOption_ReadType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadOption_ReadType_descriptor(), enum_t_value);
}
inline bool ReadOption_ReadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadOption_ReadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadOption_ReadType>(
    ReadOption_ReadType_descriptor(), name, value);
}
// ===================================================================

class ReadOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpdb.store.server.file.ReadOption) */ {
 public:
  inline ReadOption() : ReadOption(nullptr) {}
  ~ReadOption() override;
  explicit constexpr ReadOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOption(const ReadOption& from);
  ReadOption(ReadOption&& from) noexcept
    : ReadOption() {
    *this = ::std::move(from);
  }

  inline ReadOption& operator=(const ReadOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOption& operator=(ReadOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOption* internal_default_instance() {
    return reinterpret_cast<const ReadOption*>(
               &_ReadOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadOption& a, ReadOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOption* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOption* New() const final {
    return new ReadOption();
  }

  ReadOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpdb.store.server.file.ReadOption";
  }
  protected:
  explicit ReadOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadOption_ReadType ReadType;
  static constexpr ReadType UNKNOWN =
    ReadOption_ReadType_UNKNOWN;
  static constexpr ReadType FULL =
    ReadOption_ReadType_FULL;
  static constexpr ReadType RANGE =
    ReadOption_ReadType_RANGE;
  static inline bool ReadType_IsValid(int value) {
    return ReadOption_ReadType_IsValid(value);
  }
  static constexpr ReadType ReadType_MIN =
    ReadOption_ReadType_ReadType_MIN;
  static constexpr ReadType ReadType_MAX =
    ReadOption_ReadType_ReadType_MAX;
  static constexpr int ReadType_ARRAYSIZE =
    ReadOption_ReadType_ReadType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReadType_descriptor() {
    return ReadOption_ReadType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReadType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadType_Name.");
    return ReadOption_ReadType_Name(enum_t_value);
  }
  static inline bool ReadType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReadType* value) {
    return ReadOption_ReadType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kLengthFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // int64 position = 2;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int64 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .fpdb.store.server.file.ReadOption.ReadType type = 1;
  void clear_type();
  ::fpdb::store::server::file::ReadOption_ReadType type() const;
  void set_type(::fpdb::store::server::file::ReadOption_ReadType value);
  private:
  ::fpdb::store::server::file::ReadOption_ReadType _internal_type() const;
  void _internal_set_type(::fpdb::store::server::file::ReadOption_ReadType value);
  public:

  // @@protoc_insertion_point(class_scope:fpdb.store.server.file.ReadOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 position_;
  ::PROTOBUF_NAMESPACE_ID::int64 length_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileService_2eproto;
};
// -------------------------------------------------------------------

class ReadFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpdb.store.server.file.ReadFileRequest) */ {
 public:
  inline ReadFileRequest() : ReadFileRequest(nullptr) {}
  ~ReadFileRequest() override;
  explicit constexpr ReadFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadFileRequest(const ReadFileRequest& from);
  ReadFileRequest(ReadFileRequest&& from) noexcept
    : ReadFileRequest() {
    *this = ::std::move(from);
  }

  inline ReadFileRequest& operator=(const ReadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadFileRequest& operator=(ReadFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadFileRequest* internal_default_instance() {
    return reinterpret_cast<const ReadFileRequest*>(
               &_ReadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadFileRequest& a, ReadFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadFileRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadFileRequest* New() const final {
    return new ReadFileRequest();
  }

  ReadFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpdb.store.server.file.ReadFileRequest";
  }
  protected:
  explicit ReadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
    kOptionFieldNumber = 3,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_MUST_USE_RESULT std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string object = 2;
  void clear_object();
  const std::string& object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object();
  PROTOBUF_MUST_USE_RESULT std::string* release_object();
  void set_allocated_object(std::string* object);
  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(const std::string& value);
  std::string* _internal_mutable_object();
  public:

  // .fpdb.store.server.file.ReadOption option = 3;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  const ::fpdb::store::server::file::ReadOption& option() const;
  PROTOBUF_MUST_USE_RESULT ::fpdb::store::server::file::ReadOption* release_option();
  ::fpdb::store::server::file::ReadOption* mutable_option();
  void set_allocated_option(::fpdb::store::server::file::ReadOption* option);
  private:
  const ::fpdb::store::server::file::ReadOption& _internal_option() const;
  ::fpdb::store::server::file::ReadOption* _internal_mutable_option();
  public:
  void unsafe_arena_set_allocated_option(
      ::fpdb::store::server::file::ReadOption* option);
  ::fpdb::store::server::file::ReadOption* unsafe_arena_release_option();

  // @@protoc_insertion_point(class_scope:fpdb.store.server.file.ReadFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_;
  ::fpdb::store::server::file::ReadOption* option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileService_2eproto;
};
// -------------------------------------------------------------------

class ReadFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpdb.store.server.file.ReadFileResponse) */ {
 public:
  inline ReadFileResponse() : ReadFileResponse(nullptr) {}
  ~ReadFileResponse() override;
  explicit constexpr ReadFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadFileResponse(const ReadFileResponse& from);
  ReadFileResponse(ReadFileResponse&& from) noexcept
    : ReadFileResponse() {
    *this = ::std::move(from);
  }

  inline ReadFileResponse& operator=(const ReadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadFileResponse& operator=(ReadFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadFileResponse* internal_default_instance() {
    return reinterpret_cast<const ReadFileResponse*>(
               &_ReadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadFileResponse& a, ReadFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadFileResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadFileResponse* New() const final {
    return new ReadFileResponse();
  }

  ReadFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpdb.store.server.file.ReadFileResponse";
  }
  protected:
  explicit ReadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kBytesReadFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 bytes_read = 2;
  void clear_bytes_read();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_read() const;
  void set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_read() const;
  void _internal_set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:fpdb.store.server.file.ReadFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_read_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileService_2eproto;
};
// -------------------------------------------------------------------

class GetFileSizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpdb.store.server.file.GetFileSizeRequest) */ {
 public:
  inline GetFileSizeRequest() : GetFileSizeRequest(nullptr) {}
  ~GetFileSizeRequest() override;
  explicit constexpr GetFileSizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFileSizeRequest(const GetFileSizeRequest& from);
  GetFileSizeRequest(GetFileSizeRequest&& from) noexcept
    : GetFileSizeRequest() {
    *this = ::std::move(from);
  }

  inline GetFileSizeRequest& operator=(const GetFileSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileSizeRequest& operator=(GetFileSizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileSizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileSizeRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileSizeRequest*>(
               &_GetFileSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetFileSizeRequest& a, GetFileSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileSizeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileSizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileSizeRequest* New() const final {
    return new GetFileSizeRequest();
  }

  GetFileSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileSizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFileSizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFileSizeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileSizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpdb.store.server.file.GetFileSizeRequest";
  }
  protected:
  explicit GetFileSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_MUST_USE_RESULT std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string object = 2;
  void clear_object();
  const std::string& object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object();
  PROTOBUF_MUST_USE_RESULT std::string* release_object();
  void set_allocated_object(std::string* object);
  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(const std::string& value);
  std::string* _internal_mutable_object();
  public:

  // @@protoc_insertion_point(class_scope:fpdb.store.server.file.GetFileSizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileService_2eproto;
};
// -------------------------------------------------------------------

class GetFileSizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpdb.store.server.file.GetFileSizeResponse) */ {
 public:
  inline GetFileSizeResponse() : GetFileSizeResponse(nullptr) {}
  ~GetFileSizeResponse() override;
  explicit constexpr GetFileSizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFileSizeResponse(const GetFileSizeResponse& from);
  GetFileSizeResponse(GetFileSizeResponse&& from) noexcept
    : GetFileSizeResponse() {
    *this = ::std::move(from);
  }

  inline GetFileSizeResponse& operator=(const GetFileSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileSizeResponse& operator=(GetFileSizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileSizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileSizeResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileSizeResponse*>(
               &_GetFileSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetFileSizeResponse& a, GetFileSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileSizeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileSizeResponse* New() const final {
    return new GetFileSizeResponse();
  }

  GetFileSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileSizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFileSizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFileSizeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileSizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpdb.store.server.file.GetFileSizeResponse";
  }
  protected:
  explicit GetFileSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // int64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:fpdb.store.server.file.GetFileSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadOption

// .fpdb.store.server.file.ReadOption.ReadType type = 1;
inline void ReadOption::clear_type() {
  type_ = 0;
}
inline ::fpdb::store::server::file::ReadOption_ReadType ReadOption::_internal_type() const {
  return static_cast< ::fpdb::store::server::file::ReadOption_ReadType >(type_);
}
inline ::fpdb::store::server::file::ReadOption_ReadType ReadOption::type() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadOption.type)
  return _internal_type();
}
inline void ReadOption::_internal_set_type(::fpdb::store::server::file::ReadOption_ReadType value) {
  
  type_ = value;
}
inline void ReadOption::set_type(::fpdb::store::server::file::ReadOption_ReadType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.ReadOption.type)
}

// int64 position = 2;
inline void ReadOption::clear_position() {
  position_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadOption::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadOption::position() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadOption.position)
  return _internal_position();
}
inline void ReadOption::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  position_ = value;
}
inline void ReadOption::set_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.ReadOption.position)
}

// int64 length = 3;
inline void ReadOption::clear_length() {
  length_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadOption::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadOption::length() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadOption.length)
  return _internal_length();
}
inline void ReadOption::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  length_ = value;
}
inline void ReadOption::set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.ReadOption.length)
}

// -------------------------------------------------------------------

// ReadFileRequest

// string bucket = 1;
inline void ReadFileRequest::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& ReadFileRequest::bucket() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadFileRequest.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadFileRequest::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.ReadFileRequest.bucket)
}
inline std::string* ReadFileRequest::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:fpdb.store.server.file.ReadFileRequest.bucket)
  return _s;
}
inline const std::string& ReadFileRequest::_internal_bucket() const {
  return bucket_.Get();
}
inline void ReadFileRequest::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadFileRequest::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadFileRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:fpdb.store.server.file.ReadFileRequest.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadFileRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fpdb.store.server.file.ReadFileRequest.bucket)
}

// string object = 2;
inline void ReadFileRequest::clear_object() {
  object_.ClearToEmpty();
}
inline const std::string& ReadFileRequest::object() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadFileRequest.object)
  return _internal_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadFileRequest::set_object(ArgT0&& arg0, ArgT... args) {
 
 object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.ReadFileRequest.object)
}
inline std::string* ReadFileRequest::mutable_object() {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:fpdb.store.server.file.ReadFileRequest.object)
  return _s;
}
inline const std::string& ReadFileRequest::_internal_object() const {
  return object_.Get();
}
inline void ReadFileRequest::_internal_set_object(const std::string& value) {
  
  object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadFileRequest::_internal_mutable_object() {
  
  return object_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadFileRequest::release_object() {
  // @@protoc_insertion_point(field_release:fpdb.store.server.file.ReadFileRequest.object)
  return object_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadFileRequest::set_allocated_object(std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  object_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fpdb.store.server.file.ReadFileRequest.object)
}

// .fpdb.store.server.file.ReadOption option = 3;
inline bool ReadFileRequest::_internal_has_option() const {
  return this != internal_default_instance() && option_ != nullptr;
}
inline bool ReadFileRequest::has_option() const {
  return _internal_has_option();
}
inline void ReadFileRequest::clear_option() {
  if (GetArenaForAllocation() == nullptr && option_ != nullptr) {
    delete option_;
  }
  option_ = nullptr;
}
inline const ::fpdb::store::server::file::ReadOption& ReadFileRequest::_internal_option() const {
  const ::fpdb::store::server::file::ReadOption* p = option_;
  return p != nullptr ? *p : reinterpret_cast<const ::fpdb::store::server::file::ReadOption&>(
      ::fpdb::store::server::file::_ReadOption_default_instance_);
}
inline const ::fpdb::store::server::file::ReadOption& ReadFileRequest::option() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadFileRequest.option)
  return _internal_option();
}
inline void ReadFileRequest::unsafe_arena_set_allocated_option(
    ::fpdb::store::server::file::ReadOption* option) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(option_);
  }
  option_ = option;
  if (option) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpdb.store.server.file.ReadFileRequest.option)
}
inline ::fpdb::store::server::file::ReadOption* ReadFileRequest::release_option() {
  
  ::fpdb::store::server::file::ReadOption* temp = option_;
  option_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::fpdb::store::server::file::ReadOption* ReadFileRequest::unsafe_arena_release_option() {
  // @@protoc_insertion_point(field_release:fpdb.store.server.file.ReadFileRequest.option)
  
  ::fpdb::store::server::file::ReadOption* temp = option_;
  option_ = nullptr;
  return temp;
}
inline ::fpdb::store::server::file::ReadOption* ReadFileRequest::_internal_mutable_option() {
  
  if (option_ == nullptr) {
    auto* p = CreateMaybeMessage<::fpdb::store::server::file::ReadOption>(GetArenaForAllocation());
    option_ = p;
  }
  return option_;
}
inline ::fpdb::store::server::file::ReadOption* ReadFileRequest::mutable_option() {
  ::fpdb::store::server::file::ReadOption* _msg = _internal_mutable_option();
  // @@protoc_insertion_point(field_mutable:fpdb.store.server.file.ReadFileRequest.option)
  return _msg;
}
inline void ReadFileRequest::set_allocated_option(::fpdb::store::server::file::ReadOption* option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete option_;
  }
  if (option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fpdb::store::server::file::ReadOption>::GetOwningArena(option);
    if (message_arena != submessage_arena) {
      option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, option, submessage_arena);
    }
    
  } else {
    
  }
  option_ = option;
  // @@protoc_insertion_point(field_set_allocated:fpdb.store.server.file.ReadFileRequest.option)
}

// -------------------------------------------------------------------

// ReadFileResponse

// bytes data = 1;
inline void ReadFileResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReadFileResponse::data() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadFileResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadFileResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.ReadFileResponse.data)
}
inline std::string* ReadFileResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fpdb.store.server.file.ReadFileResponse.data)
  return _s;
}
inline const std::string& ReadFileResponse::_internal_data() const {
  return data_.Get();
}
inline void ReadFileResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadFileResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadFileResponse::release_data() {
  // @@protoc_insertion_point(field_release:fpdb.store.server.file.ReadFileResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadFileResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fpdb.store.server.file.ReadFileResponse.data)
}

// int64 bytes_read = 2;
inline void ReadFileResponse::clear_bytes_read() {
  bytes_read_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadFileResponse::_internal_bytes_read() const {
  return bytes_read_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadFileResponse::bytes_read() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.ReadFileResponse.bytes_read)
  return _internal_bytes_read();
}
inline void ReadFileResponse::_internal_set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_read_ = value;
}
inline void ReadFileResponse::set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_read(value);
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.ReadFileResponse.bytes_read)
}

// -------------------------------------------------------------------

// GetFileSizeRequest

// string bucket = 1;
inline void GetFileSizeRequest::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& GetFileSizeRequest::bucket() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.GetFileSizeRequest.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFileSizeRequest::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.GetFileSizeRequest.bucket)
}
inline std::string* GetFileSizeRequest::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:fpdb.store.server.file.GetFileSizeRequest.bucket)
  return _s;
}
inline const std::string& GetFileSizeRequest::_internal_bucket() const {
  return bucket_.Get();
}
inline void GetFileSizeRequest::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFileSizeRequest::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFileSizeRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:fpdb.store.server.file.GetFileSizeRequest.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFileSizeRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fpdb.store.server.file.GetFileSizeRequest.bucket)
}

// string object = 2;
inline void GetFileSizeRequest::clear_object() {
  object_.ClearToEmpty();
}
inline const std::string& GetFileSizeRequest::object() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.GetFileSizeRequest.object)
  return _internal_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFileSizeRequest::set_object(ArgT0&& arg0, ArgT... args) {
 
 object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.GetFileSizeRequest.object)
}
inline std::string* GetFileSizeRequest::mutable_object() {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:fpdb.store.server.file.GetFileSizeRequest.object)
  return _s;
}
inline const std::string& GetFileSizeRequest::_internal_object() const {
  return object_.Get();
}
inline void GetFileSizeRequest::_internal_set_object(const std::string& value) {
  
  object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFileSizeRequest::_internal_mutable_object() {
  
  return object_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFileSizeRequest::release_object() {
  // @@protoc_insertion_point(field_release:fpdb.store.server.file.GetFileSizeRequest.object)
  return object_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFileSizeRequest::set_allocated_object(std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  object_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fpdb.store.server.file.GetFileSizeRequest.object)
}

// -------------------------------------------------------------------

// GetFileSizeResponse

// int64 size = 1;
inline void GetFileSizeResponse::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFileSizeResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFileSizeResponse::size() const {
  // @@protoc_insertion_point(field_get:fpdb.store.server.file.GetFileSizeResponse.size)
  return _internal_size();
}
inline void GetFileSizeResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void GetFileSizeResponse::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:fpdb.store.server.file.GetFileSizeResponse.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace server
}  // namespace store
}  // namespace fpdb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fpdb::store::server::file::ReadOption_ReadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fpdb::store::server::file::ReadOption_ReadType>() {
  return ::fpdb::store::server::file::ReadOption_ReadType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FileService_2eproto
