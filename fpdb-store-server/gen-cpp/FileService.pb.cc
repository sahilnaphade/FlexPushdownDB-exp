// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileService.proto

#include "FileService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace fpdb {
namespace store {
namespace server {
namespace file {
constexpr ReadOption::ReadOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(int64_t{0})
  , length_(int64_t{0})
  , type_(0)
{}
struct ReadOptionDefaultTypeInternal {
  constexpr ReadOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadOptionDefaultTypeInternal() {}
  union {
    ReadOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadOptionDefaultTypeInternal _ReadOption_default_instance_;
constexpr ReadFileRequest::ReadFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , option_(nullptr){}
struct ReadFileRequestDefaultTypeInternal {
  constexpr ReadFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadFileRequestDefaultTypeInternal() {}
  union {
    ReadFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadFileRequestDefaultTypeInternal _ReadFileRequest_default_instance_;
constexpr ReadFileResponse::ReadFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_read_(int64_t{0}){}
struct ReadFileResponseDefaultTypeInternal {
  constexpr ReadFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadFileResponseDefaultTypeInternal() {}
  union {
    ReadFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadFileResponseDefaultTypeInternal _ReadFileResponse_default_instance_;
constexpr GetFileSizeRequest::GetFileSizeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetFileSizeRequestDefaultTypeInternal {
  constexpr GetFileSizeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFileSizeRequestDefaultTypeInternal() {}
  union {
    GetFileSizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFileSizeRequestDefaultTypeInternal _GetFileSizeRequest_default_instance_;
constexpr GetFileSizeResponse::GetFileSizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(int64_t{0}){}
struct GetFileSizeResponseDefaultTypeInternal {
  constexpr GetFileSizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFileSizeResponseDefaultTypeInternal() {}
  union {
    GetFileSizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFileSizeResponseDefaultTypeInternal _GetFileSizeResponse_default_instance_;
}  // namespace file
}  // namespace server
}  // namespace store
}  // namespace fpdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FileService_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_FileService_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FileService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FileService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadOption, type_),
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadOption, position_),
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadOption, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadFileRequest, bucket_),
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadFileRequest, object_),
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadFileRequest, option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadFileResponse, data_),
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::ReadFileResponse, bytes_read_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::GetFileSizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::GetFileSizeRequest, bucket_),
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::GetFileSizeRequest, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::GetFileSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpdb::store::server::file::GetFileSizeResponse, size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fpdb::store::server::file::ReadOption)},
  { 8, -1, sizeof(::fpdb::store::server::file::ReadFileRequest)},
  { 16, -1, sizeof(::fpdb::store::server::file::ReadFileResponse)},
  { 23, -1, sizeof(::fpdb::store::server::file::GetFileSizeRequest)},
  { 30, -1, sizeof(::fpdb::store::server::file::GetFileSizeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpdb::store::server::file::_ReadOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpdb::store::server::file::_ReadFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpdb::store::server::file::_ReadFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpdb::store::server::file::_GetFileSizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpdb::store::server::file::_GetFileSizeResponse_default_instance_),
};

const char descriptor_table_protodef_FileService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021FileService.proto\022\026fpdb.store.server.f"
  "ile\"\227\001\n\nReadOption\0229\n\004type\030\001 \001(\0162+.fpdb."
  "store.server.file.ReadOption.ReadType\022\020\n"
  "\010position\030\002 \001(\003\022\016\n\006length\030\003 \001(\003\",\n\010ReadT"
  "ype\022\013\n\007UNKNOWN\020\000\022\010\n\004FULL\020\001\022\t\n\005RANGE\020\002\"e\n"
  "\017ReadFileRequest\022\016\n\006bucket\030\001 \001(\t\022\016\n\006obje"
  "ct\030\002 \001(\t\0222\n\006option\030\003 \001(\0132\".fpdb.store.se"
  "rver.file.ReadOption\"4\n\020ReadFileResponse"
  "\022\014\n\004data\030\001 \001(\014\022\022\n\nbytes_read\030\002 \001(\003\"4\n\022Ge"
  "tFileSizeRequest\022\016\n\006bucket\030\001 \001(\t\022\016\n\006obje"
  "ct\030\002 \001(\t\"#\n\023GetFileSizeResponse\022\014\n\004size\030"
  "\001 \001(\0032\326\001\n\013FileService\022_\n\010ReadFile\022\'.fpdb"
  ".store.server.file.ReadFileRequest\032(.fpd"
  "b.store.server.file.ReadFileResponse0\001\022f"
  "\n\013GetFileSize\022*.fpdb.store.server.file.G"
  "etFileSizeRequest\032+.fpdb.store.server.fi"
  "le.GetFileSizeResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FileService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileService_2eproto = {
  false, false, 670, descriptor_table_protodef_FileService_2eproto, "FileService.proto", 
  &descriptor_table_FileService_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_FileService_2eproto::offsets,
  file_level_metadata_FileService_2eproto, file_level_enum_descriptors_FileService_2eproto, file_level_service_descriptors_FileService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_FileService_2eproto_getter() {
  return &descriptor_table_FileService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FileService_2eproto(&descriptor_table_FileService_2eproto);
namespace fpdb {
namespace store {
namespace server {
namespace file {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadOption_ReadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FileService_2eproto);
  return file_level_enum_descriptors_FileService_2eproto[0];
}
bool ReadOption_ReadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadOption_ReadType ReadOption::UNKNOWN;
constexpr ReadOption_ReadType ReadOption::FULL;
constexpr ReadOption_ReadType ReadOption::RANGE;
constexpr ReadOption_ReadType ReadOption::ReadType_MIN;
constexpr ReadOption_ReadType ReadOption::ReadType_MAX;
constexpr int ReadOption::ReadType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ReadOption::_Internal {
 public:
};

ReadOption::ReadOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fpdb.store.server.file.ReadOption)
}
ReadOption::ReadOption(const ReadOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fpdb.store.server.file.ReadOption)
}

inline void ReadOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_)) + sizeof(type_));
}

ReadOption::~ReadOption() {
  // @@protoc_insertion_point(destructor:fpdb.store.server.file.ReadOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOption::ArenaDtor(void* object) {
  ReadOption* _this = reinterpret_cast< ReadOption* >(object);
  (void)_this;
}
void ReadOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadOption::Clear() {
// @@protoc_insertion_point(message_clear_start:fpdb.store.server.file.ReadOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fpdb.store.server.file.ReadOption.ReadType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::fpdb::store::server::file::ReadOption_ReadType>(val));
        } else goto handle_unusual;
        continue;
      // int64 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpdb.store.server.file.ReadOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fpdb.store.server.file.ReadOption.ReadType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_position(), target);
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpdb.store.server.file.ReadOption)
  return target;
}

size_t ReadOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpdb.store.server.file.ReadOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 position = 2;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_position());
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_length());
  }

  // .fpdb.store.server.file.ReadOption.ReadType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOption::GetClassData() const { return &_class_data_; }

void ReadOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReadOption *>(to)->MergeFrom(
      static_cast<const ReadOption &>(from));
}


void ReadOption::MergeFrom(const ReadOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpdb.store.server.file.ReadOption)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOption::CopyFrom(const ReadOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpdb.store.server.file.ReadOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOption::IsInitialized() const {
  return true;
}

void ReadOption::InternalSwap(ReadOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadOption, type_)
      + sizeof(ReadOption::type_)
      - PROTOBUF_FIELD_OFFSET(ReadOption, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FileService_2eproto_getter, &descriptor_table_FileService_2eproto_once,
      file_level_metadata_FileService_2eproto[0]);
}

// ===================================================================

class ReadFileRequest::_Internal {
 public:
  static const ::fpdb::store::server::file::ReadOption& option(const ReadFileRequest* msg);
};

const ::fpdb::store::server::file::ReadOption&
ReadFileRequest::_Internal::option(const ReadFileRequest* msg) {
  return *msg->option_;
}
ReadFileRequest::ReadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fpdb.store.server.file.ReadFileRequest)
}
ReadFileRequest::ReadFileRequest(const ReadFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucket().empty()) {
    bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bucket(), 
      GetArenaForAllocation());
  }
  object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object().empty()) {
    object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_option()) {
    option_ = new ::fpdb::store::server::file::ReadOption(*from.option_);
  } else {
    option_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fpdb.store.server.file.ReadFileRequest)
}

inline void ReadFileRequest::SharedCtor() {
bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
option_ = nullptr;
}

ReadFileRequest::~ReadFileRequest() {
  // @@protoc_insertion_point(destructor:fpdb.store.server.file.ReadFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete option_;
}

void ReadFileRequest::ArenaDtor(void* object) {
  ReadFileRequest* _this = reinterpret_cast< ReadFileRequest* >(object);
  (void)_this;
}
void ReadFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpdb.store.server.file.ReadFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmpty();
  object_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && option_ != nullptr) {
    delete option_;
  }
  option_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpdb.store.server.file.ReadFileRequest.bucket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_object();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpdb.store.server.file.ReadFileRequest.object"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fpdb.store.server.file.ReadOption option = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpdb.store.server.file.ReadFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpdb.store.server.file.ReadFileRequest.bucket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bucket(), target);
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpdb.store.server.file.ReadFileRequest.object");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object(), target);
  }

  // .fpdb.store.server.file.ReadOption option = 3;
  if (this->_internal_has_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::option(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpdb.store.server.file.ReadFileRequest)
  return target;
}

size_t ReadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpdb.store.server.file.ReadFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  // .fpdb.store.server.file.ReadOption option = 3;
  if (this->_internal_has_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *option_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadFileRequest::GetClassData() const { return &_class_data_; }

void ReadFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReadFileRequest *>(to)->MergeFrom(
      static_cast<const ReadFileRequest &>(from));
}


void ReadFileRequest::MergeFrom(const ReadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpdb.store.server.file.ReadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _internal_set_object(from._internal_object());
  }
  if (from._internal_has_option()) {
    _internal_mutable_option()->::fpdb::store::server::file::ReadOption::MergeFrom(from._internal_option());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadFileRequest::CopyFrom(const ReadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpdb.store.server.file.ReadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFileRequest::IsInitialized() const {
  return true;
}

void ReadFileRequest::InternalSwap(ReadFileRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bucket_, GetArenaForAllocation(),
      &other->bucket_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_, GetArenaForAllocation(),
      &other->object_, other->GetArenaForAllocation()
  );
  swap(option_, other->option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FileService_2eproto_getter, &descriptor_table_FileService_2eproto_once,
      file_level_metadata_FileService_2eproto[1]);
}

// ===================================================================

class ReadFileResponse::_Internal {
 public:
};

ReadFileResponse::ReadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fpdb.store.server.file.ReadFileResponse)
}
ReadFileResponse::ReadFileResponse(const ReadFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  bytes_read_ = from.bytes_read_;
  // @@protoc_insertion_point(copy_constructor:fpdb.store.server.file.ReadFileResponse)
}

inline void ReadFileResponse::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bytes_read_ = int64_t{0};
}

ReadFileResponse::~ReadFileResponse() {
  // @@protoc_insertion_point(destructor:fpdb.store.server.file.ReadFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadFileResponse::ArenaDtor(void* object) {
  ReadFileResponse* _this = reinterpret_cast< ReadFileResponse* >(object);
  (void)_this;
}
void ReadFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpdb.store.server.file.ReadFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  bytes_read_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bytes_read = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpdb.store.server.file.ReadFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpdb.store.server.file.ReadFileResponse)
  return target;
}

size_t ReadFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpdb.store.server.file.ReadFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bytes_read());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadFileResponse::GetClassData() const { return &_class_data_; }

void ReadFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReadFileResponse *>(to)->MergeFrom(
      static_cast<const ReadFileResponse &>(from));
}


void ReadFileResponse::MergeFrom(const ReadFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpdb.store.server.file.ReadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_bytes_read() != 0) {
    _internal_set_bytes_read(from._internal_bytes_read());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadFileResponse::CopyFrom(const ReadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpdb.store.server.file.ReadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFileResponse::IsInitialized() const {
  return true;
}

void ReadFileResponse::InternalSwap(ReadFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  swap(bytes_read_, other->bytes_read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FileService_2eproto_getter, &descriptor_table_FileService_2eproto_once,
      file_level_metadata_FileService_2eproto[2]);
}

// ===================================================================

class GetFileSizeRequest::_Internal {
 public:
};

GetFileSizeRequest::GetFileSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fpdb.store.server.file.GetFileSizeRequest)
}
GetFileSizeRequest::GetFileSizeRequest(const GetFileSizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucket().empty()) {
    bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bucket(), 
      GetArenaForAllocation());
  }
  object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object().empty()) {
    object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fpdb.store.server.file.GetFileSizeRequest)
}

inline void GetFileSizeRequest::SharedCtor() {
bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFileSizeRequest::~GetFileSizeRequest() {
  // @@protoc_insertion_point(destructor:fpdb.store.server.file.GetFileSizeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFileSizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileSizeRequest::ArenaDtor(void* object) {
  GetFileSizeRequest* _this = reinterpret_cast< GetFileSizeRequest* >(object);
  (void)_this;
}
void GetFileSizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileSizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFileSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpdb.store.server.file.GetFileSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmpty();
  object_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileSizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpdb.store.server.file.GetFileSizeRequest.bucket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_object();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpdb.store.server.file.GetFileSizeRequest.object"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileSizeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpdb.store.server.file.GetFileSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpdb.store.server.file.GetFileSizeRequest.bucket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bucket(), target);
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpdb.store.server.file.GetFileSizeRequest.object");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpdb.store.server.file.GetFileSizeRequest)
  return target;
}

size_t GetFileSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpdb.store.server.file.GetFileSizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileSizeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFileSizeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileSizeRequest::GetClassData() const { return &_class_data_; }

void GetFileSizeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetFileSizeRequest *>(to)->MergeFrom(
      static_cast<const GetFileSizeRequest &>(from));
}


void GetFileSizeRequest::MergeFrom(const GetFileSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpdb.store.server.file.GetFileSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _internal_set_object(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileSizeRequest::CopyFrom(const GetFileSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpdb.store.server.file.GetFileSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileSizeRequest::IsInitialized() const {
  return true;
}

void GetFileSizeRequest::InternalSwap(GetFileSizeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bucket_, GetArenaForAllocation(),
      &other->bucket_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_, GetArenaForAllocation(),
      &other->object_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileSizeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FileService_2eproto_getter, &descriptor_table_FileService_2eproto_once,
      file_level_metadata_FileService_2eproto[3]);
}

// ===================================================================

class GetFileSizeResponse::_Internal {
 public:
};

GetFileSizeResponse::GetFileSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fpdb.store.server.file.GetFileSizeResponse)
}
GetFileSizeResponse::GetFileSizeResponse(const GetFileSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:fpdb.store.server.file.GetFileSizeResponse)
}

inline void GetFileSizeResponse::SharedCtor() {
size_ = int64_t{0};
}

GetFileSizeResponse::~GetFileSizeResponse() {
  // @@protoc_insertion_point(destructor:fpdb.store.server.file.GetFileSizeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFileSizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetFileSizeResponse::ArenaDtor(void* object) {
  GetFileSizeResponse* _this = reinterpret_cast< GetFileSizeResponse* >(object);
  (void)_this;
}
void GetFileSizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFileSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpdb.store.server.file.GetFileSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileSizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpdb.store.server.file.GetFileSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpdb.store.server.file.GetFileSizeResponse)
  return target;
}

size_t GetFileSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpdb.store.server.file.GetFileSizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileSizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFileSizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileSizeResponse::GetClassData() const { return &_class_data_; }

void GetFileSizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetFileSizeResponse *>(to)->MergeFrom(
      static_cast<const GetFileSizeResponse &>(from));
}


void GetFileSizeResponse::MergeFrom(const GetFileSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpdb.store.server.file.GetFileSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileSizeResponse::CopyFrom(const GetFileSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpdb.store.server.file.GetFileSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileSizeResponse::IsInitialized() const {
  return true;
}

void GetFileSizeResponse::InternalSwap(GetFileSizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileSizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FileService_2eproto_getter, &descriptor_table_FileService_2eproto_once,
      file_level_metadata_FileService_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace file
}  // namespace server
}  // namespace store
}  // namespace fpdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fpdb::store::server::file::ReadOption* Arena::CreateMaybeMessage< ::fpdb::store::server::file::ReadOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpdb::store::server::file::ReadOption >(arena);
}
template<> PROTOBUF_NOINLINE ::fpdb::store::server::file::ReadFileRequest* Arena::CreateMaybeMessage< ::fpdb::store::server::file::ReadFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpdb::store::server::file::ReadFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpdb::store::server::file::ReadFileResponse* Arena::CreateMaybeMessage< ::fpdb::store::server::file::ReadFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpdb::store::server::file::ReadFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fpdb::store::server::file::GetFileSizeRequest* Arena::CreateMaybeMessage< ::fpdb::store::server::file::GetFileSizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpdb::store::server::file::GetFileSizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpdb::store::server::file::GetFileSizeResponse* Arena::CreateMaybeMessage< ::fpdb::store::server::file::GetFileSizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpdb::store::server::file::GetFileSizeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
